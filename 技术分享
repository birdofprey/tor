
系统：Debian Gnu/Linux 9
1、安装基本组件：
        使用如下命令：
apt-get install tor tor-arm tor-geoip torsocks python-geoip python-geoip2 obfs4proxy obfsproxy torbrowser-launcher
2、执行Torbrowser-launcher安装Torbrowser浏览器，界面如下：

用户需要自行进行代理设置。3、执行Torbrowser程序启动Tor浏览器，出现如下界面：


选择配置出现如下界面：
选择“是”选项，并下一步出现如下界面：
这里可以选择meek-amazon或者meek-azure选项，下一步后出现如下界面：
用户可根据自己的情况进行设置。之后出现如下界面：
如果长时间停留在该界面下，需要从新选择网桥，或者重新前往https://bridges.torobject.org申请新的网桥进行连接。正常连接后将出现如下界面：
用户点击“测试Tor网络设置”可以看到如下含有一个IP地址界面：

基础配置就算完成了。2、配置客户端TOR软件并启用TOR桥模式。作为一个自由网络的使用这，我们希望您在使用TOR网络时也能分享一部分带宽实现自由的延续。这样每一个人都可以由此获得自由上网的权利。配置方法如下：
vi /etc/apparmor.d/abstractions/tor 添加或修改包含如下内容：
/usr/bin/obfsproxy ix,
/usr/bin/obfs4proxy ix,
/usr/bin/meek-client ix,
保存并退出。
以此执行如下命令：
[root@localhost~]# aa-complain /etc/apparmor.d/torbrowser.Browser.firefox
[root@localhost~]# aa-complain /etc/apparmor.d/torbrowser.Tor.tor
[root@localhost~]# aa-complain /etc/apparmor.d/system_tor
vi /etc/tor/torrc,内容如下：
DNSPort 9053
 AutomapHostsOnResolve 1
 AutomapHostsSuffixes .exit,.onion
### obfs4proxy configuration
ServerTransportPlugin obfs4 exec /usr/bin/obfs4proxy
ServerTransportListenAddr obfs4 0.0.0.0:1521
ExtORPort auto
BridgeRelay 1
ORPort 8333 
Exitpolicy reject *:*
Nickname myname
ContactInfo hahahah@...
PublishServerDescriptor 0 #,bridge 
RelayBandwidthRate 200 KBytes
RelayBandwidthBurst 5000 KBytes
Socks5Proxy 127.0.0.1:9150
配置文件不多解释，大家可以去查找资料，很多很多的。涉及的端口除了DNSPort为默认的9053外，其他端口用户都可以进行自定义。最后一行是使用代理配置。用户可以根据自己的代理地址进行配置。我选用的是TOR浏览器作为代理服务，在TOR浏览器器中可以使用更前置代理。这样数据通路中实际是使用了OBFS4PROXY再到meek的混淆，然后出站。
3、用户使用。建议用户安装Chrome浏览器并使用Tor™ Browser Button访问网络。用户使用中先启动前置代理，之后打开TorBrowser浏览器，但不要访问内容，之后系统服务tor@default.service会将自己设置为私桥，此时再使用Chrome+Tor™ Browser Button访问https网站。数据流如下：数据→localhost:9050→localhost:9150→前置代理→出站。
4、端口随机化设置：
4.1、vi /etc/systemd/system/tor@default.service
在[Service]段中加入如下行：
ExecStartPre=/usr/local/bin/rand.sh > /dev/null  2>&1

[Service]段完整内容如下：
[Service]
Type=notify
NotifyAccess=all
PIDFile=/var/run/tor/tor.pid
PermissionsStartOnly=yes
ExecStartPre=/usr/bin/install -Z -m 02755 -o debian-tor -g debian-tor -d /var/run/tor
ExecStartPre=/usr/local/bin/rand.sh > /dev/null 2>&1
ExecStartPre=/usr/bin/tor --defaults-torrc /usr/share/tor/tor-service-defaults-torrc -f /etc/tor/torrc --RunAsDaemon 0 --verify-config
ExecStart=/usr/bin/tor --defaults-torrc /usr/share/tor/tor-service-defaults-torrc -f /etc/tor/torrc --RunAsDaemon 0
ExecReload=/bin/kill -HUP ${MAINPID}
KillSignal=SIGINT
TimeoutStartSec=300
TimeoutStopSec=60
Restart=on-failure
LimitNOFILE=65536
增加如下行：
ReadWriteDirectories=-/etc/tor
4.2、vi usrlocal/bin/rand.sh
内容如下：
#!/bin/bash

##################################
####随机生成####
##################################

function rand(){
        min=$1
        max=$(($2-$min+1))
        num=$(date +%s%N)
        echo $(($num%$max+$min))
}

rnd=$(rand 49700 65535)
####sed -i "s/^ORPort.*/ORPort\ $rnd/g" /etc/tor/torrc
sed -i "s/ServerTransportListenAddr\ obfs4\ 0.0.0.0:.*$/ServerTransportListenAddr\ obfs4\ 0.0.0.0:$rnd1/g" /etc/tor/torrc
4.3、chmod +x /usr/local/bin/rand.sh
4.4、crontab -e
添加如下内容：
13 * * * * systemctl restart tor@default.service
完成端口随机化选定并重启TOR服务。
5、dnscrypt-proxy+dnsmasq配置
5.1、安装
apt-get install dnsmasq dnsmasq-base dnsmasq-utils dnscrypt-proxy dnscrypt-proxy-plugins
5.2、配置dnscrypt-proxy。
 vi /lib/systemd/system/dnscrypt-proxy.socket,[Socket]段默认端口53修改为任意需要的端口，我这里使用40举例，内容行如下：
[Socket]
ListenStream=127.0.0.1:40
ListenDatagram=127.0.0.1:40
vi /etc/dnscrypt-proxy/dnscrypt-proxy.conf 修改为如下内容：
ResolverName fvz-anyone
ResolverName fvz-anytwo
ResolverName cisco
ResolversList /usr/share/dnscrypt-proxy/dnscrypt-resolvers.csv
Daemonize no

# LocalAddress only applies to users of the init script. systemd users must
# change the dnscrypt-proxy.socket file.
LocalAddress 127.0.0.1:40
5.3、执行如下命令启动dnscrypt-proxy服务。
systemctl daemon-reload
systemctl restart dnscrypt-proxy.service
5.4、配置DNSMASQ服务。
5.4.1、修改配置文件：
vi /etc/dmsmasq.conf,添加如下行：
server=/google.com/127.0.0.1#40
server=/twitter.com/127.0.0.1#40
server=/facebook.com/127.0.0.1#40
server=/./127.0.0.1#40
最后一行是对根域的解析。用户可以跟据自己的需要添加其它需要TLS进行解析的域名。
6、安装proxychains及配置。
6.1、安装
apt-get install proxychains
6.2、配置
vi /etc/proxychains.conf ，将[ProxyList]段修改为如下行：
socks5  127.0.0.1 9050
7、测试：
pip install httpstat

proxychains httpstat https://www.google.com/ncr
回显内容如下：
ProxyChains-3.1 (http://proxychains.sf.net)
|S-chain|-<>-127.0.0.1:9050-<><>-216.58.203.14:443-<><>-OK

Connected to 127.0.0.1:9050 from 127.0.0.1:43706

HTTP/2 302 
location: https://www.google.com/
cache-control: private
content-type: text/html; charset=UTF-8
p3p: CP="This is not a P3P policy! See g.co/p3phelp for more info."
date: Sat, 24 Mar 2018 01:58:09 GMT
server: gws
content-length: 220
x-xss-protection: 1; mode=block
x-frame-options: SAMEORIGIN
set-cookie: NID=126=AXa-slGA2z37yvB4v27GkhDDt-1QYEaeV-UN9-OhAZjDNIC3HPhgu2PM1XYP27NMOlcq4Z6VghGwj82Silra4b1r7ENXY_ZpUQm-dUHS28XlstrIzTP_t3ZgtdgJ_jtb; expires=Sun, 23-Sep-2018 01:58:09 GMT; path=/; domain=.google.com; HttpOnly
alt-svc: hq=":443"; ma=2592000; quic=51303432; quic=51303431; quic=51303339; quic=51303335,quic=":443"; ma=2592000; v="42,41,39,35"

Body stored in: /tmp/tmpvEgVwf

  DNS Lookup   TCP Connection   TLS Handshake   Server Processing   Content Transfer
[     4ms    |     1514ms     |    3505ms     |      1847ms       |        0ms       ]
             |                |               |                   |                  |
    namelookup:4ms            |               |                   |                  |
                        connect:1518ms        |                   |                  |
                                    pretransfer:5023ms            |                  |
                                                      starttransfer:6870ms           |
                                                                                 total:6870ms
从回显中我们可以看到DNS的相应时间只用了4MS，还是很不错滴。
8、开启TLS1.3
8.1、chrome:
    chrome://flags
Experimental QUIC protocol
TLS 1.3
设置为enable
8.2、firefox:
    about:config
ctrl+F，搜索 security.tls.version.max,将值修改为“4”。


